Folders
1. arduino: code, config for sensor controller using mqtt & json
2. exporter: node exporter text collector, *.prom (touching or creating new will cause metrics to be sourced by prometheus)
3. grafana: data folder
4. prometheus: prometheus data folder

How to run
1. git clone the project
2. ./prep.sh (answer questions to get values replaced properly)
3. docker-compose up (this will also build a docker image 'sensor_mqttclient') ** if you need to modify code, eg. sub.py, 
4. use arduino ide to upload code & start your arduino controller to send sensor metrics to mqtt broker, if you don't have arduino, use pub.py to send fake sensor readings, 'docker run -d sensor_mqttclient python -m pub'
5. if you need to change code, you need to rebuild mqttclient, eg. 'docker-compose build mqttclient --no-cache'

Components
1. hivemq: (broker/server)
        ui access: http://<ip address>:8080
        credential: admin/hivemq

2. publisher (faking arduino), https://www.emqx.com/en/blog/comparision-of-python-mqtt-client (paho-mqtt)
        run: docker run -d sensor_mqttclient python -m pub 

3. subscriber, gets metrics from topic 'sensor/json' and writes to exporter directory, https://www.emqx.com/en/blog/comparision-of-python-mqtt-client (paho-mqtt)
        run: docker run -d sensor_mqttclient python -m sub ** it's part of docker compose already 

4. prometheus, used to store metrics
        ui access: http://<ip address>:9090

5. prometheus exporter text collector
        ** text format, https://prometheus.io/docs/instrumenting/exposition_formats/ 
        ui access: http://<ip address>:9100

6. grafana
        ** TODO: see how to avoid manually config data source and dashboard, https://grafana.com/docs/grafana/latest/administration/configure-docker/
        ui access: http://<ip address>:9100
        credential: admin/admin

7. arduino the publisher, upload to mkr 1010, 
        https://docs.arduino.cc/tutorials/mkr-wifi-1010/connecting-to-wifi-network
        https://docs.arduino.cc/tutorials/mkr-wifi-1010/mqtt-device-to-device
        
        topic: 'sensor/json'

Reference: 
1. docker-compose: https://github.com/stefanprodan/dockprom/blob/master/docker-compose.yml

TODO:
5. see how to dump prometheus data to csv
8. enhance sub.py, instead of using os cmd, use https://github.com/prometheus/client_python, prom_client.py
11. add diagram, picture of hydroponics
12. add arduino part
14. fix instruction, need to run pub.py first to get some metrics, add config for grafana

DONE: 
1. fix arduino publisher to use mqtt and json (done)
2. fix sub to write to exporter/sensor.prom (done)
3. check if prom picks up the metrics (done)
4. bring up grafana and query prometheus, build a simple visualization (done)
6. use docker compose to start all containers (done)
7. fix mqtt session or connection failure (done)
9. containerize pub and sub (done)
10. externalize ip:192.168.1.156, wifi info etc (done)
13. add logging to sub.py (done)